{
  "version": 3,
  "sources": ["../../@facephi/sdk-web-wc/dist/esm/src/components/selphi-widget/model.ts", "../../@facephi/sdk-web-wc/dist/esm/src/components/selphi-widget/style.css?tag=facephi-selphi-widget&encapsulation=shadow", "../../@facephi/sdk-web-wc/dist/esm/src/components/selphi-widget/selphi-widget.tsx"],
  "sourcesContent": ["/* eslint-disable @typescript-eslint/no-explicit-any */\nimport { FPhi } from '@facephi/selphi-widget-web';\n\ntype Keys = keyof typeof FPhi;\n\ntype Values = typeof FPhi[Keys];\n\nexport type SelphiExtractionFinishEvent = {\n  detail: {\n    template: string;\n    templateRaw: string;\n    bestImage: HTMLImageElement;\n    bestImageCropped: HTMLImageElement;\n    images: Array<HTMLImageElement>;\n  };\n};\n\nexport type SelphiTrackStatusEvent = {\n  detail: {\n    code: number;\n    data: boolean | string;\n    timeStamp: number;\n  }\n}\n\nexport enum LivenessMode {\n  None = 0,\n  Passive = 3,\n}\n\nexport enum CameraType {\n  Front = 0,\n  Back = 1,\n}\n\nexport type SelphiExceptionCapturedEvent = {\n  detail: {\n    message: string;\n    exceptionType: Values;\n  };\n};\n\nexport enum EventsFaceCapture {\n  trackStatus = 'onFaceTrackStatus',\n  success = 'onFaceExtractionFinished',\n  cancel = 'onFaceUserCancel',\n  exception = 'onFaceExceptionCaptured',\n  start = 'onFaceStart',\n  timeout = 'onFaceExtractionTimeout',\n}\n\nexport enum AuthenticationException {\n  timeout = 'SELPHI_TIMEOUT',\n  userCancel = 'SELPHI_CANCEL_BY_USER',\n}\n\nexport enum CameraRotation {\n  noCameraRotation = 0,\n  degrees90 = 1,\n  degrees180 = 2,\n  degrees270 = 3,\n}\n", ":host {\n  flex: 1;\n  height: 100%;\n  width: 100%;\n  display: flex;\n}", "/* eslint-disable @typescript-eslint/no-explicit-any */\nimport { Component, Event, EventEmitter, Host, Prop, State, Watch, h } from '@stencil/core';\nimport { ERRORS, MOBILE } from '../../state/constants';\nimport { AssetsType, LicenseComponents, TrackingReason, TrackingStatus, TrackingSteps } from '../../state/model';\nimport state, { onChange } from '../../state/store';\nimport { useDeviceInfo } from '../../utils/browser';\nimport { setWidgetParam } from '../../utils/utils';\nimport { CameraRotation, CameraType, SelphiExceptionCapturedEvent, SelphiExtractionFinishEvent, LivenessMode, SelphiTrackStatusEvent } from './model';\n\n@Component({\n  tag: 'facephi-selphi-widget',\n  styleUrl: 'style.css',\n  shadow: true,\n})\nexport class SelphiWidget {\n  @State() node!: any;\n  @State() loading = true;\n  trackingElement: HTMLFacephiSdkProviderElement;\n  videoElement: HTMLFacephiVideoProviderElement;\n  channel: any;\n\n  @State() error: string;\n\n  /** (required) Base path where all static resources are located. */\n  @Prop() bundlePath: string;\n\n  /** Enables an extended mode of data emission to show more detailed information regarding the internal processes of the widget on the browser console */\n  @Prop() showLog: boolean;\n  /** Turns debugging mode on or off. This mode displays real-time information on the screen upon the widget */\n  @Prop() debugMode: boolean;\n\n  /** Indicates the language in which the widget will be displayed. 2-letter ISO code to indicate the language to be used. */\n  @Prop() language: string;\n  /** Property responsible for reconfiguring the widget so that it can work with standard HTML elements that comply with accessibility standards. */\n  @Prop() accessibility = false;\n  /** Detailed list of the accessible elements enabled for the web widget. */\n  @Prop() accessibleElements: string[] = ['button', 'buttonImage'];\n  /** Indicates whether a tutorial should be shown to the user prior to the extraction process. */\n  @Prop() tutorial: boolean;\n\n  /** Enables the antispoofing process */\n  @Prop() antispoofEnabled = false;\n\n  /** Informs the widget that an externally initialised video stream is to be delivered to it to carry out the widget's internal operations. */\n  @Prop() externalCamera: boolean;\n\n  /**  This property indicates the preferred horizontal resolution for the camera. */\n  @Prop() cameraWidth: number;\n  /** This property indicates the preferred vertical resolution for the camera. */\n  @Prop() cameraHeight: number;\n  /** Allows you to select the type of camera to be used to carry out the capture. */\n  @Prop() cameraType: CameraType = CameraType.Front;\n  /** Indicates the camera rotation used. */\n  @Prop() cameraRotation: CameraRotation = CameraRotation.noCameraRotation;\n  /** Indicates the camera rotation used. */\n  @Prop() stabilizationStage = false;\n  /**  Allows the widget to move the camera position to center the user's face. */\n  @Prop() faceTracking = false;\n  /** Indicates whether the user interacts with the component to start the extraction using buttons or the process starts automatically. */\n  @Prop() interactible: boolean;\n  /** Time available in milliseconds to capture an image of a document before a timeout is issued. If the value is 0, the timeout will never be executed. */\n  @Prop() timeout: number;\n  /** Time in seconds spent for facial feature extraction during authentication. */\n  @Prop() authenticateTime = 1;\n\n  /** If image/jpeg has been selected as the output image format, this parameter will be used to indicate its compression level (values from 0.0 to 1.0). */\n  @Prop() imageQuality: number;\n  /** Format of the images returned by the widget. */\n  @Prop() imageFormat: 'image/jpeg' | 'image/jpg' | 'image/png';\n  /** This allows you to enable or disable the cropping of images returned from the widget to the detected face area. */\n  @Prop() cropImage: boolean;\n  /** Allows you to set the factor that will enlarge the cropped image of the face and this value is applied when the cropImage parameter is “true”. (recommended value: 1.7) */\n  @Prop() cropFactor: number;\n  /** Indicates whether the widget will return the list of the best images used during the extraction process. */\n  @Prop() logImages: boolean;\n\n  @Prop() bundlePathExternal: string;\n\n  /** Occurs when the widget finishes loading on the page and allows the logic required by the web application to be associated once the widget has loaded successfully. */\n  @Event() moduleLoaded: EventEmitter;\n  /** Captured when some exception occurs in the widget or an unexpected situation occurs during the extraction of facial features. Information about the exception can be consulted in the exception result. The “Message” property contains the exception message, whilst “ExceptionType” contains the exception type. */\n  @Event() exceptionCaptured: EventEmitter<SelphiExceptionCapturedEvent>;\n  /** Captured when the user cancels the registration process or the authentication process. */\n  @Event() userCancel: EventEmitter<SelphiExceptionCapturedEvent>;\n  /** This occurs after any action carried out by the user on the widget's graphic interface or after any change of status during the capture process. */\n  @Event() trackStatus: EventEmitter<SelphiTrackStatusEvent>;\n  /** This occurs when the stabilisation stage ends (the stage at which the user search is performed before starting the extraction) and allows the result to be obtained. */\n  @Event() stabilising: EventEmitter;\n  /** Captured when the widget was unable to successfully complete facial pattern extraction owing to the fact that the maximum time allowed has run out. */\n  @Event() extractionTimeout: EventEmitter<SelphiExceptionCapturedEvent>;\n  /** Captured when the widget has finished extracting facial patterns and the facial template has been generated. You can also get a face template from SelphID “TemplateRaw” , and a sunglasses score “SunGlassesScore” . Also, in the “Images” property you can find a list with the images used during the extraction process. You can also get a list of timestamps for each of the “TimeStamp” images. */\n  @Event() extractionFinish: EventEmitter<SelphiExtractionFinishEvent>;\n\n  @Event() livenessErrorButtonClick: EventEmitter<SelphiExceptionCapturedEvent>;\n  @Event() timeoutErrorButtonClick: EventEmitter<SelphiExceptionCapturedEvent>;\n\n  private device = useDeviceInfo().device;\n\n  @State() component;\n\n  disconnectComponent;\n\n  @Watch('node')\n  watchNode(newValue) {\n    if (newValue) {\n      this.node.addEventListener('onModuleLoaded', this.onModuleLoaded.bind(this));\n      this.node.addEventListener('onExtractionFinish', this.onExtractionFinish.bind(this));\n      this.node.addEventListener('onUserCancel', this.onUserCancel.bind(this));\n      this.node.addEventListener('onExceptionCaptured', this.onExceptionCaptured.bind(this));\n      this.node.addEventListener('onLivenessErrorButtonClick', this.onLivenessErrorButtonClick.bind(this));\n      this.node.addEventListener('onExtractionTimeout', this.onExtractionTimeout.bind(this));\n      this.node.addEventListener('onTimeoutErrorButtonClick', this.onTimeoutErrorButtonClick.bind(this));\n      this.node.addEventListener('onTrackStatus', this.onTrackStatus.bind(this));\n      this.handleVideo();\n    }\n  }\n\n  private onTrackStatus(event) {\n    this.trackStatus.emit(event);\n  }\n\n  private onModuleLoaded(event) {\n    this.moduleLoaded.emit(event);\n  }\n\n  private onExtractionFinish(event) {\n    this.extractionFinish.emit(event);\n\n    event.stopPropagation();\n\n    if (this.trackingElement) {\n      this.trackingElement.trackingAsset(event.detail.bestImage.src, AssetsType.selfie);\n    }\n  }\n\n  private onUserCancel(event: SelphiExceptionCapturedEvent) {\n    this.userCancel.emit(event);\n\n    if (this.trackingElement) {\n      this.trackingElement.trackingStatus(TrackingStatus.cancelled, TrackingReason.selphiCancelUser);\n    }\n  }\n\n  private onExceptionCaptured(event: SelphiExceptionCapturedEvent) {\n    if (this.trackingElement) {\n      this.trackingElement.trackingStatus(TrackingStatus.denied, TrackingReason.selphiInternalError);\n    }\n\n    this.exceptionCaptured.emit(event);\n  }\n\n  private onLivenessErrorButtonClick(event: SelphiExceptionCapturedEvent) {\n    if (this.trackingElement) {\n      this.trackingElement.trackingStatus(TrackingStatus.denied, TrackingReason.selphiInternalError);\n    }\n\n    this.livenessErrorButtonClick.emit(event);\n  }\n  private onExtractionTimeout(event: SelphiExceptionCapturedEvent) {\n    if (this.trackingElement) {\n      this.trackingElement.trackingStatus(TrackingStatus.expired, TrackingReason.selphiTimeout);\n    }\n\n    this.extractionTimeout.emit(event);\n  }\n\n  private onTimeoutErrorButtonClick(event: SelphiExceptionCapturedEvent) {\n    if (this.trackingElement) {\n      this.trackingElement.trackingStatus(TrackingStatus.expired, TrackingReason.selphiTimeout);\n    }\n    this.timeoutErrorButtonClick.emit(event);\n  }\n\n  handleVideo() {\n    if (this.channel) {\n      const streamList = [this.channel.video.getMediaStreamTrack(), this.channel.audio.getMediaStreamTrack()];\n      if (this.node) {\n        this.node.setAttribute('externalcamera', 'true');\n        this.node.mountExternalCamera(new MediaStream(streamList));\n      }\n    }\n  }\n\n  async checkVideo() {\n    await customElements.whenDefined('facephi-video-provider');\n    this.videoElement = document.querySelector('facephi-video-provider');\n\n    if (this.videoElement) {\n      this.videoElement.getChannel().then(channel => {\n        this.channel = channel;\n        this.handleVideo();\n      });\n      this.videoElement.addEventListener('changeChannel', (event: any) => {\n        this.channel = event.detail;\n        this.handleVideo();\n      });\n      if (this.device.type === MOBILE) {\n        await this.videoElement.setCameraFront();\n      }\n    }\n  }\n\n  async componentDidLoad() {\n    await customElements.whenDefined('facephi-sdk-provider');\n    this.trackingElement = document.querySelector('facephi-sdk-provider');\n\n    if (this.trackingElement) {\n      this.trackingElement.trackingEvent(TrackingSteps.selphiWidget, TrackingSteps.selphiWidget);\n      await this.checkVideo();\n      this.loading = false;\n    } else {\n      this.loading = false;\n    }\n\n    if (this.node) {\n      this.node.addEventListener('onExtractionFinish', this.onExtractionFinish.bind(this));\n      this.node.addEventListener('onUserCancel', this.onUserCancel.bind(this));\n      this.node.addEventListener('onExceptionCaptured', this.onExceptionCaptured.bind(this));\n      this.node.addEventListener('onLivenessErrorButtonClick', this.onLivenessErrorButtonClick.bind(this));\n      this.node.addEventListener('onExtractionTimeout', this.onExtractionTimeout.bind(this));\n      this.node.addEventListener('onTimeoutErrorButtonClick', this.onTimeoutErrorButtonClick.bind(this));\n\n      if (this.trackStatus) {\n        this.node.addEventListener('onTrackStatus', this.trackStatus);\n      }\n    }\n  }\n\n  @Watch('component')\n  updateComponent(newValue) {\n    if (newValue) {\n      this.error = undefined;\n    } else {\n      this.error = ERRORS.SELPHI_NOT_LICENSED;\n    }\n  }\n\n  connectedCallback() {\n    if (state.components) {\n      this.component = state.components[LicenseComponents.selphiWidget] ?? null;\n    }\n\n    this.disconnectComponent = onChange('components', components => {\n      this.component = components[LicenseComponents.selphiWidget] ?? null;\n    });\n  }\n\n  disconnectedCallback() {\n    if (this.node) {\n      this.node.removeEventListener('onExtractionFinish', this.onExtractionFinish.bind(this));\n      this.node.removeEventListener('onUserCancel', this.onUserCancel.bind(this));\n      this.node.removeEventListener('onExceptionCaptured', this.onExceptionCaptured.bind(this));\n      this.node.removeEventListener('onLivenessErrorButtonClick', this.onLivenessErrorButtonClick.bind(this));\n      this.node.removeEventListener('onExtractionTimeout', this.onExtractionTimeout.bind(this));\n      this.node.removeEventListener('onTimeoutErrorButtonClick', this.onTimeoutErrorButtonClick.bind(this));\n\n      if (this.trackStatus) {\n        this.node.removeEventListener('onTrackStatus', this.trackStatus);\n      }\n    }\n\n    this.disconnectComponent();\n  }\n\n  render() {\n    return (\n      <Host>\n        {!this.loading ? (\n          this.error ? (\n            <p>{this.error}</p>\n          ) : (\n            <facephi-selphi\n              ref={(el: HTMLDivElement) => (this.node = el)}\n              bundlePath={this.bundlePathExternal ? this.bundlePathExternal : window.location.origin + this.bundlePath}\n              language={this.language}\n              livenessMode={LivenessMode.Passive}\n              interactible={setWidgetParam(this.interactible)}\n              tutorial={setWidgetParam(this.tutorial)}\n              logImages={setWidgetParam(this.logImages)}\n              cropFactor={this.cropFactor}\n              cropImage={setWidgetParam(this.cropImage)}\n              externalCamera={setWidgetParam(this.externalCamera)}\n              showLog={setWidgetParam(this.showLog)}\n              debugMode={setWidgetParam(this.debugMode)}\n              accessibility={setWidgetParam(this.accessibility)}\n              accessibleElements={this.accessibleElements}\n              cameraWidth={this.cameraWidth}\n              cameraHeight={this.cameraHeight}\n              cameraRotation={this.cameraRotation}\n              cameraType={this.cameraType}\n              antispoofEnabled={setWidgetParam(this.antispoofEnabled)}\n              stabilizationStage={setWidgetParam(this.stabilizationStage)}\n              faceTracking={setWidgetParam(this.faceTracking)}\n              timeout={this.timeout}\n              imageQuality={this.imageQuality}\n              imageFormat={this.imageFormat}\n              authenticateTime={this.authenticateTime}\n            />\n          )\n        ) : null}\n      </Host>\n    );\n  }\n}\n"],
  "mappings": "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",
  "names": ["LivenessMode", "CameraType", "EventsFaceCapture", "AuthenticationException", "CameraRotation", "_a"]
}
