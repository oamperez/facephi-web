{
  "version": 3,
  "sources": ["../../@facephi/sdk-web-wc/dist/esm/src/components/selphid-widget/style.css?tag=facephi-selphid-widget&encapsulation=shadow", "../../@facephi/sdk-web-wc/dist/esm/src/components/selphid-widget/selphid-widget.tsx"],
  "sourcesContent": [":host {\n  flex: 1;\n  height: 100%;\n  width: 100%;\n  display: flex;\n}", "/* eslint-disable @typescript-eslint/no-explicit-any */\nimport { Component, Event, EventEmitter, Host, Prop, State, Watch, h } from '@stencil/core';\nimport { ERRORS, MOBILE } from '../../state/constants';\nimport { AssetsType, LicenseComponents, TrackingReason, TrackingStatus, TrackingSteps } from '../../state/model';\nimport state, { onChange } from '../../state/store';\nimport { useDeviceInfo } from '../../utils/browser';\nimport { setWidgetParam } from '../../utils/utils';\nimport { DocumentMode, DocumentType, SelphidTrackStatusEvent, SelphidExceptionCapturedEvent, SelphidExtractionFinishEvent, ScanMode } from './model';\n\n@Component({\n  tag: 'facephi-selphid-widget',\n  styleUrl: 'style.css',\n  shadow: true,\n})\nexport class SelphidWidget {\n  @State() node!: any;\n  @State() loading = true;\n  trackingElement: HTMLFacephiSdkProviderElement;\n  videoElement: HTMLFacephiVideoProviderElement;\n  channel: any;\n\n  @State() error: string;\n\n  /** (Required) Base path where all static resources are located. */\n  @Prop() bundlePath: string;\n  /** (Required)  It contains the license previously provided by the FacePhi team for the use of SelphID. As a prerequisite for receiving this license, you must indicate the URL of the environment where the component is going to be deployed. */\n  @Prop() licenseKey: string;\n\n  @State() license: string;\n\n  /** Enables an extended mode of data emission to show more detailed information regarding the internal processes of the widget on the browser console. */\n  @Prop() showLog = false;\n  /** Turns debugging mode on or off. This mode displays real-time information on the screen upon the widget */\n  @Prop() debugMode = false;\n\n  /** Indicates the language in which the widget will be displayed. 2-letter ISO code to indicate the language to be used. */\n  @Prop() language: string;\n  /** Property responsible for reconfiguring the widget so that it can work with standard HTML elements that comply with accessibility standards. */\n  @Prop() accessibility: string;\n  /** Detailed list of the accessible elements enabled for the web widget. */\n  @Prop() accessibleElements: string[] = ['button', 'buttonImage'];\n  /** Displays an initial usage warning message after the widget loads. */\n  @Prop() initialTip: boolean;\n\n  /**  If enabled, the widget will force a 90ยบ rotated layout of its content when a vertical layout of the screen is detected (area occupied by the widget with a height greater than width). */\n  @Prop() forceLandscape: boolean;\n  /**  If enabled, the widget will operate in a special display mode for high-density screens. */\n  @Prop() canvasHD: boolean;\n  /**  If this is enabled it collects all the image available from the camera, if it is disabled it collects the size of the canvas only. */\n  @Prop() cameraOverflow: boolean;\n  /** When set to true, the Web Widget makes the decision, depending on what mode the camera is in, to mirror or not. If set to false, it will globally disable mirror mode for the camera image. */\n  @Prop() cameraMirror: boolean;\n\n  /* Identifier of the camera to be used to carry out the capture. */\n  @Prop() cameraId: string;\n  /* Informs the widget that an externally initialised video stream is to be delivered to it to carry out the widget's internal operations. */\n  @Prop() externalCamera = false;\n  /** This property indicates the preferred horizontal resolution for the camera. */\n  @Prop() cameraWidth = 1280;\n  /** This property indicates the preferred vertical resolution for the camera. */\n  @Prop() cameraHeight = 720;\n  /** List of on-screen pixel densities supported by the widget, in order to display the appropriate resource images for the current screen. */\n  @Prop() dpiList: number[];\n  /** Set the aspect ratio of the document. (width heigth) */\n  @Prop() documentAspectRatio: number;\n  /** Indicates the type of document capture. */\n  @Prop() documentMode: DocumentMode;\n  /** List of the different document types. */\n  @Prop() documentType: DocumentType;\n  /** If enabled, the widget will show the image of the captured document and ask the user for confirmation to issue that capture as valid or to make a new one. */\n  @Prop() previewCapture: boolean;\n  /** Tolerance threshold to validate a document capture when there is blur. The higher this value is, the quality of the image, in reference to the focus, should be higher. */\n  @Prop() blurredThreshold: number;\n  /** Time available in seconds to capture an image of a document before a timeout is issued. If the property value is 0, the timeout will never be executed. */\n  @Prop() captureTimeout: number;\n  /** Maximum number of retries to obtain a valid document image capture. If the value of the property is 0, the number of retries will be infinite. */\n  @Prop() captureRetries: number;\n  /** Allows asking the user if he wants to launch simple capture mode (manual capture of the document) after a timeout occurs. */\n  @Prop() askSimpleMode: boolean;\n\n  /** Format of the images returned by the widget. */\n  @Prop() imageFormat: 'image/jpeg' | 'image/jpg' | 'image/png' = 'image/jpeg';\n  /** If image/jpeg has been selected as the output image format, this parameter will be used to indicate its compression level (values from 0.0 to 1.0). */\n  @Prop() imageQuality: number;\n  /** Scaling factor over the crop area of the document image. The returned image is scaled according to this value. */\n  @Prop() cropFactor: number;\n  /** Mode with which the scan is performed */\n  @Prop() scanMode: ScanMode;\n  /** Field to specify the allowed countries. */\n  @Prop() specificdata: string | string[];\n  /** Enables the recognition of any document that has a photograph, being the most permissive mode of SelphID. */\n  @Prop() allowUnknownDocuments: boolean;\n  /** Allows greater permissiveness of the Widget in the extraction process. */\n  @Prop() allowUncertain: boolean;\n\n  /** Enables the recognition and reading of barcodes and QR codes and the extraction of data from them */\n  @Prop() barcode: boolean;\n\n  /* Determines in which side (front, back or both) of the document, the barcode recognizer will be enabled. The options are, Front with value = 0, Back with value = 1 o Both with value = 2. */\n  @Prop() barcodeSide: number;\n\n  /** Number of letters per word that can be wrong when extracting the OCR. */\n  @Prop() maxAllowedMismatches: number;\n  /** Increase in the degree of permissiveness applied to the maxAllowedMismatches, increasing with each retry. */\n  @Prop() progressiveMismatches: number;\n  /** Enable or disable the algorithm that tries to make the best camera selection. */\n  @Prop() cameraSelection: boolean;\n\n  @Prop() startSimpleMode = false;\n\n  /** Activates the lightweight resources of the engine. These resources notably speed up the widget loading, making it a good alternative for use on devices with limited resources. */\n  @Prop() lightweight = false;\n\n  /**  Occurs when the widget finishes loading on the page and allows the logic required by the web application to be associated once the widget has loaded successfully. */\n  @Event() moduleLoaded: EventEmitter;\n  /** Issued when the extraction process has completed successfully */\n  @Event() extractionFinish: EventEmitter<SelphidExtractionFinishEvent>;\n  /** Event emitted if the maximum available capture time is exceeded without having made a valid capture. If the widget does not make a valid capture in less than 30 seconds, this event will be emitted. */\n  @Event() extractionTimeout: EventEmitter<SelphidExceptionCapturedEvent>;\n  /** Event fired in the event of an internal widget error. */\n  @Event() exceptionCaptured: EventEmitter<SelphidExceptionCapturedEvent>;\n  /** Deprecated: Captured when the user cancels the registration process or the authentication process. */\n  @Event() userCancelled: EventEmitter<SelphidExceptionCapturedEvent>;\n  /** Captured when the user cancels the registration process or the authentication process. */\n  @Event() userCancel: EventEmitter<SelphidExceptionCapturedEvent>;\n  /**  It occurs after any action carried out by the user on the widget's graphic interface or after any change of state during the capture process. */\n  @Event() trackStatus: EventEmitter<SelphidTrackStatusEvent>;\n\n  private device = useDeviceInfo().device;\n\n  @State() component;\n\n  onModuleLoaded(event: any) {\n    this.moduleLoaded.emit(event);\n  }\n\n  disconnectComponent;\n\n  @Watch('component')\n  updateComponent(newValue) {\n    if (newValue) {\n      this.license = newValue.parameters.license;\n      this.error = undefined;\n      this.loading = false;\n    } else {\n      this.error = ERRORS.SELPHID_NOT_LICENSED;\n      this.loading = false;\n    }\n  }\n\n  connectedCallback() {\n    if (state.components) {\n      this.component = state.components[LicenseComponents.selphidWidget] ?? null;\n    }\n\n    this.disconnectComponent = onChange('components', components => {\n      this.component = components[LicenseComponents.selphidWidget] ?? null;\n    });\n  }\n\n  @Watch('node')\n  watchNode(newValue) {\n    if (newValue) {\n      try {\n        this.node.addEventListener('onModuleLoaded', this.onModuleLoaded.bind(this));\n        this.node.addEventListener('onExtractionFinished', this.onExtractionFinished.bind(this));\n        this.node.addEventListener('onUserCancelled', this.onUserCancel.bind(this));\n        this.node.addEventListener('onExceptionCaptured', this.onExceptionCaptured.bind(this));\n        this.node.addEventListener('onExtractionTimeout', this.onExtractionTimeout.bind(this));\n        this.node.addEventListener('onTrackStatus', this.onTrackStatus.bind(this));\n        this.handleVideo();\n      } catch (e) {\n        //Log\n      }\n    }\n  }\n\n  onExtractionFinished(event) {\n    this.extractionFinish.emit(event);\n\n    event.stopPropagation();\n    if (this.trackingElement) {\n      this.trackingElement.trackingAsset(event.detail.images.frontDocument, AssetsType.documentFront);\n      this.trackingElement.trackingAsset(event.detail.images.backDocument, AssetsType.documentBack);\n    }\n  }\n\n  onUserCancel(event: any) {\n    if (this.trackingElement) {\n      this.trackingElement.trackingStatus(TrackingStatus.cancelled, TrackingReason.selphidCancelUser);\n    }\n    /* Deprecated **/\n    this.userCancelled.emit(event);\n    this.userCancel.emit(event);\n  }\n\n  onExceptionCaptured(event: any) {\n    if (this.trackingElement) {\n      this.trackingElement.trackingStatus(TrackingStatus.denied, TrackingReason.selphidInternalError);\n    }\n    this.exceptionCaptured.emit(event);\n  }\n\n  onExtractionTimeout(event: any) {\n    if (this.trackingElement) {\n      this.trackingElement.trackingStatus(TrackingStatus.expired, TrackingReason.selphidTimeout);\n    }\n    this.extractionTimeout.emit(event);\n  }\n\n  onTrackStatus(event: any) {\n    this.trackStatus.emit(event);\n  }\n\n  handleVideo() {\n    if (this.channel) {\n      const streamList = [this.channel.video.getMediaStreamTrack(), this.channel.audio.getMediaStreamTrack()];\n      if (this.node) {\n        this.node.setAttribute('externalcamera', 'true');\n        this.node.setAttribute('cameramirror', 'true');\n        if (this.device.type === MOBILE) {\n          this.node.setAttribute('cameramirror', 'false');\n        }\n        this.node.mountExternalCamera(new MediaStream(streamList));\n      }\n    } else if (this.node) {\n      this.node.setAttribute('cameramirror', 'true');\n    }\n  }\n\n  async checkVideo() {\n    await customElements.whenDefined('facephi-video-provider');\n    this.videoElement = document.querySelector('facephi-video-provider');\n\n    if (this.videoElement) {\n      this.videoElement.getChannel().then(channel => {\n        this.channel = channel;\n        this.handleVideo();\n      });\n      this.videoElement.addEventListener('changeChannel', (event: any) => {\n        this.channel = event.detail;\n        this.handleVideo();\n      });\n      if (this.device.type === MOBILE) {\n        await this.videoElement.setCameraRear();\n      }\n    }\n  }\n\n  async componentDidLoad() {\n    await customElements.whenDefined('facephi-sdk-provider');\n    this.trackingElement = document.querySelector('facephi-sdk-provider');\n\n    if (this.licenseKey) {\n      this.license = this.licenseKey;\n    }\n\n    this.license = this.licenseKey;\n\n    if (this.trackingElement) {\n      this.trackingElement.trackingEvent(TrackingSteps.selphidWidget, TrackingSteps.selphidWidget);\n      await this.checkVideo();\n    }\n\n    if (this.licenseKey) {\n      this.loading = false;\n    }\n  }\n\n  disconnectedCallback() {\n    if (this.node) {\n      this.node.removeEventListener('onModuleLoaded', this.onModuleLoaded.bind(this));\n      this.node.removeEventListener('onExtractionFinished', this.onExtractionFinished.bind(this));\n      this.node.removeEventListener('onUserCancelled', this.onUserCancel.bind(this));\n      this.node.removeEventListener('onExceptionCaptured', this.onExceptionCaptured.bind(this));\n      this.node.removeEventListener('onExtractionTimeout', this.onExtractionTimeout.bind(this));\n      this.node.removeEventListener('onTrackStatus', this.onTrackStatus.bind(this));\n    }\n\n    this.disconnectComponent();\n  }\n\n  render() {\n    return (\n      <Host>\n        {!this.loading ? (\n          this.error ? (\n            <p>{this.error}</p>\n          ) : (\n            <facephi-selphid\n              ref={(el: HTMLDivElement) => (this.node = el)}\n              bundlePath={this.bundlePath}\n              licenseKey={this.license}\n              documentAspectRatio={this.documentAspectRatio}\n              documentMode={this.documentMode}\n              documentType={this.documentType}\n              previewCapture={setWidgetParam(this.previewCapture)}\n              blurredThreshold={this.blurredThreshold}\n              captureTimeout={this.captureTimeout}\n              captureRetries={this.captureRetries}\n              askSimpleMode={setWidgetParam(this.askSimpleMode)}\n              language={this.language}\n              canvasHD={setWidgetParam(this.canvasHD)}\n              cameraOverflow={setWidgetParam(this.cameraOverflow)}\n              imageFormat={this.imageFormat}\n              imageQuality={this.imageQuality}\n              cropFactor={this.cropFactor}\n              scanMode={this.scanMode}\n              specificdata={this.specificdata}\n              allowUnknownDocuments={setWidgetParam(this.allowUnknownDocuments)}\n              allowUncertain={setWidgetParam(this.allowUncertain)}\n              maxAllowedMismatches={this.maxAllowedMismatches}\n              progressiveMismatches={this.progressiveMismatches}\n              cameraSelection={setWidgetParam(this.cameraSelection)}\n              forceLandscape={setWidgetParam(this.forceLandscape)}\n              initialTip={setWidgetParam(this.initialTip)}\n              cameraWidth={this.cameraWidth}\n              cameraHeight={this.cameraHeight}\n              cameraMirror={setWidgetParam(this.cameraMirror)}\n              cameraId={this.cameraId}\n              showLog={setWidgetParam(this.showLog)}\n              debugMode={setWidgetParam(this.debugMode)}\n              startSimpleMode={setWidgetParam(this.startSimpleMode)}\n              lightweight={setWidgetParam(this.lightweight)}\n              style={{\n                width: '100%',\n                height: this.forceLandscape ? '56.25%' : '100%',\n              }}\n              externalCamera={setWidgetParam(this.externalCamera)}\n              barcode={setWidgetParam(this.barcode)}\n              barcodeSide={this.barcodeSide}\n            />\n          )\n        ) : null}\n      </Host>\n    );\n  }\n}\n"],
  "mappings": "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",
  "names": ["_a"]
}
